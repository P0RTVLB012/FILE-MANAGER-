import tkinter as tk
from tkinter import messagebox, simpledialog
import os
import hashlib

# Define the password
PASSWORD = "2571"
USERS = {"admin": hashlib.sha256("admin_pass".encode()).hexdigest()}

# Define the document folder (absolute path)
DOCUMENT_FOLDER = r"C:\Users\Deforest Bennett\OneDrive\file_manager_v5"

# Create a list of documents (for demonstration purposes)
documents = {
    "1": "document1.txt",
    "2": "document2.txt",
    "3": "document3.txt"
}

def display_document_choices():
    choices = "\n".join([f"{key}. {doc}" for key, doc in documents.items()])
    return choices

def display_document(doc_name):
    doc_path = os.path.join(DOCUMENT_FOLDER, doc_name)
    try:
        with open(doc_path, 'r') as file:
            return file.read()
    except FileNotFoundError:
        return "Error: The document does not exist."

def save_document(doc_name, content):
    doc_path = os.path.join(DOCUMENT_FOLDER, doc_name)
    try:
        with open(doc_path, 'w') as file:
            file.write(content)
    except Exception as e:
        messagebox.showerror("Error", f"Error saving document: {str(e)}")

def delete_document(doc_name):
    doc_path = os.path.join(DOCUMENT_FOLDER, doc_name)
    try:
        if os.path.exists(doc_path):
            os.remove(doc_path)
            # Update documents list
            for key, value in list(documents.items()):
                if value == doc_name:
                    del documents[key]
                    break
            show_document_choices()
        else:
            messagebox.showerror("Error", "Document not found.")
    except Exception as e:
        messagebox.showerror("Error", f"Error deleting document: {str(e)}")

def authenticate_user(username, password):
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    return USERS.get(username) == hashed_password

def main():
    def check_password():
        if password_entry.get() == PASSWORD:
            password_frame.pack_forget()
            menu_frame.pack(fill='both', expand=True)
        else:
            messagebox.showerror("Error", "Incorrect password.")

    def show_document_choices():
        choices_text.set(display_document_choices())

    def open_document():
        choice = document_entry.get()
        if choice == "0":
            root.quit()
        elif choice in documents:
            doc_name = documents[choice]
            content = display_document(doc_name)
            content_text.set(content)
            show_document_frame()
        else:
            messagebox.showerror("Error", "Invalid choice. Please select a valid document number.")

    def create_document():
        doc_name = simpledialog.askstring("Create Document", "Enter document name:")
        if doc_name:
            doc_content = simpledialog.askstring("Document Content", "Enter document content:")
            if doc_content:
                save_document(doc_name, doc_content)
                documents[str(len(documents) + 1)] = doc_name
                show_document_choices()

    def edit_document():
        choice = document_entry.get()
        if choice in documents:
            doc_name = documents[choice]
            current_content = display_document(doc_name)
            new_content = simpledialog.askstring("Edit Document", "Edit document content:", initialvalue=current_content)
            if new_content is not None:
                save_document(doc_name, new_content)
                content_text.set(new_content)
                show_document_frame()
        else:
            messagebox.showerror("Error", "Invalid choice. Please select a valid document number.")

    def delete_document_action():
        choice = document_entry.get()
        if choice in documents:
            doc_name = documents[choice]
            result = messagebox.askyesno("Confirm Delete", f"Are you sure you want to delete '{doc_name}'?")
            if result:
                delete_document(doc_name)
                show_document_choices()
                content_text.set("")
        else:
            messagebox.showerror("Error", "Invalid choice. Please select a valid document number.")

    def change_document_path():
        new_path = simpledialog.askstring("Change Path", "Enter new document folder path:")
        if new_path:
            global DOCUMENT_FOLDER
            DOCUMENT_FOLDER = new_path
            messagebox.showinfo("Info", f"Document path changed to: {new_path}")

    def back_to_menu():
        document_frame.pack_forget()
        menu_frame.pack(fill='both', expand=True)

    def show_loading_screen(duration):
        loading_screen = tk.Toplevel(root)
        loading_screen.geometry("300x100")
        loading_label = tk.Label(loading_screen, text="Loading...")
        loading_label.pack(expand=True)
        root.update()
        root.after(duration, loading_screen.destroy)

    root = tk.Tk()
    root.title("Document Manager")

    # Neuro OS Loading Screen
    neuro_loading_screen = tk.Toplevel(root)
    neuro_loading_screen.geometry("300x100")
    neuro_loading_label = tk.Label(neuro_loading_screen, text="Neuro OS loading...")
    neuro_loading_label.pack(expand=True)
    root.after(3000, neuro_loading_screen.destroy)
    root.update()

    # Password Frame
    password_frame = tk.Frame(root)
    tk.Label(password_frame, text="Enter the password:").pack(pady=10)
    password_entry = tk.Entry(password_frame, show='*')
    password_entry.pack(pady=5)
    tk.Button(password_frame, text="Submit", command=lambda: [show_loading_screen(1000), check_password()]).pack(pady=10)
    password_frame.pack(fill='both', expand=True)

    # Menu Frame
    menu_frame = tk.Frame(root)
    tk.Label(menu_frame, text="Available Documents:").pack(pady=10)
    choices_text = tk.StringVar()
    tk.Label(menu_frame, textvariable=choices_text).pack(pady=10)
    show_document_choices()
    tk.Label(menu_frame, text="Select a document by number or 0 to exit:").pack(pady=10)
    document_entry = tk.Entry(menu_frame)
    document_entry.pack(pady=5)
    document_entry.bind("<Return>", lambda event: [show_loading_screen(1000), open_document()])
    tk.Button(menu_frame, text="Open Document", command=lambda: [show_loading_screen(1000), open_document()]).pack(pady=10)
    tk.Button(menu_frame, text="Create New Document", command=lambda: [show_loading_screen(1000), create_document()]).pack(pady=10)
    tk.Button(menu_frame, text="Edit Document", command=lambda: [show_loading_screen(1000), edit_document()]).pack(pady=10)
    tk.Button(menu_frame, text="Delete Document", command=lambda: [show_loading_screen(1000), delete_document_action()]).pack(pady=10)
    tk.Button(menu_frame, text="Change Document Path", command=change_document_path).pack(pady=10)

    # Document Frame
    document_frame = tk.Frame(root)
    content_text = tk.StringVar()
    tk.Label(document_frame, textvariable=content_text).pack(pady=10)
    tk.Button(document_frame, text="Back to Menu", command=lambda: [show_loading_screen(1000), back_to_menu()]).pack(pady=10)

    def show_document_frame():
        menu_frame.pack_forget()
        document_frame.pack(fill='both', expand=True)

    root.mainloop()

if __name__ == "__main__":
    # Ensure the document folder exists
    if not os.path.exists(DOCUMENT_FOLDER):
        os.makedirs(DOCUMENT_FOLDER)
    
    # Add some example documents if they do not exist
    for key, doc in documents.items():
        doc_path = os.path.join(DOCUMENT_FOLDER, doc)
        if not os.path.exists(doc_path):
            with open(doc_path, 'w') as file:
                file.write(f"This is the content of {doc}.")
    
    main()
